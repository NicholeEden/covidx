// <auto-generated />
using System;
using EFCORE_DATAACCESS;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace _CovidXWebApp.Migrations
{
    [DbContext(typeof(CovidXSQLDBContext))]
    [Migration("20211111133614_AddedEmailToDependents")]
    partial class AddedEmailToDependents
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.CalendarEvent", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<bool>("AllDay")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CalendarEvents");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AllDay = false,
                            Description = "19 Admirality Way Summerstrand",
                            End = new DateTime(2021, 11, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2021, 11, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "19 Admirality Way"
                        },
                        new
                        {
                            ID = 2,
                            AllDay = false,
                            Description = "19 Admirality Way Summerstrand",
                            End = new DateTime(2021, 11, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2021, 11, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "19 Admirality Way"
                        },
                        new
                        {
                            ID = 3,
                            AllDay = false,
                            Description = "19 Admirality Way Summerstrand",
                            End = new DateTime(2021, 11, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2021, 11, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "19 Admirality Way"
                        },
                        new
                        {
                            ID = 4,
                            AllDay = false,
                            Description = "19 Admirality Way Summerstrand",
                            End = new DateTime(2021, 11, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2021, 11, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "19 Admirality Way"
                        },
                        new
                        {
                            ID = 5,
                            AllDay = false,
                            Description = "19 Admirality Way Summerstrand",
                            End = new DateTime(2021, 11, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2021, 11, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "19 Admirality Way"
                        },
                        new
                        {
                            ID = 6,
                            AllDay = false,
                            Description = "1 Harbor Cottages Humerail",
                            End = new DateTime(2021, 11, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2021, 11, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "1 Harbor Cottages"
                        },
                        new
                        {
                            ID = 15,
                            AllDay = false,
                            Description = "45 Columbia Crescent Missionvale",
                            End = new DateTime(2021, 11, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Start = new DateTime(2021, 11, 12, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "45 Columbia Crescent"
                        });
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "Gqeberha"
                        });
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.CovidXUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CovidXUser");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.Dependent", b =>
                {
                    b.Property<int>("DependentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DependencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DependentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Idnumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MainMemberId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalAidNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MedicalAidPlanId")
                        .HasColumnType("int");

                    b.Property<bool>("MedicalAidStatus")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PersonResponsible")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SuburbId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("DependentId");

                    b.HasIndex("DependentTypeId");

                    b.HasIndex("MainMemberId");

                    b.HasIndex("MedicalAidPlanId");

                    b.HasIndex("SuburbId");

                    b.ToTable("Dependent");

                    b.HasData(
                        new
                        {
                            DependentId = 91,
                            AddressLine1 = "19 Admirality Way",
                            DependentTypeId = 1006,
                            Dob = new DateTime(1958, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Dalene",
                            Gender = 0,
                            Idnumber = "5803180224083",
                            LastName = "Meintjies",
                            MainMemberId = 1,
                            MedicalAidNo = "285465885",
                            MedicalAidPlanId = 8,
                            MedicalAidStatus = true,
                            MobileNumber = "0832458796",
                            PersonResponsible = "Charmaine Meintjies",
                            SuburbId = 126
                        },
                        new
                        {
                            DependentId = 92,
                            AddressLine1 = "19 Admirality Way",
                            DependentTypeId = 1007,
                            Dob = new DateTime(2012, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Vince",
                            Gender = 1,
                            Idnumber = "1205050225083",
                            LastName = "Meintjies",
                            MainMemberId = 1,
                            MedicalAidNo = "285465885",
                            MedicalAidPlanId = 8,
                            MedicalAidStatus = true,
                            MobileNumber = "0832458796",
                            PersonResponsible = "Charmaine Meintjies",
                            SuburbId = 126
                        },
                        new
                        {
                            DependentId = 93,
                            AddressLine1 = "19 Admirality Way",
                            DependentTypeId = 1007,
                            Dob = new DateTime(2016, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Vanessa",
                            Gender = 0,
                            Idnumber = "1607070225083",
                            LastName = "Meintjies",
                            MainMemberId = 1,
                            MedicalAidNo = "285465885",
                            MedicalAidPlanId = 8,
                            MedicalAidStatus = true,
                            MobileNumber = "0832458796",
                            PersonResponsible = "Charmaine Meintjies",
                            SuburbId = 126
                        },
                        new
                        {
                            DependentId = 94,
                            AddressLine1 = "19 Admirality Way",
                            DependentTypeId = 1006,
                            Dob = new DateTime(1953, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Daniel",
                            Gender = 1,
                            Idnumber = "5309130225083",
                            LastName = "Meintjies",
                            MainMemberId = 1,
                            MedicalAidNo = "285465885",
                            MedicalAidPlanId = 8,
                            MedicalAidStatus = true,
                            MobileNumber = "0832458796",
                            PersonResponsible = "Charmaine Meintjies",
                            SuburbId = 126
                        },
                        new
                        {
                            DependentId = 95,
                            AddressLine1 = "24 7th Avenue",
                            DependentTypeId = 1002,
                            Dob = new DateTime(1983, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Lesedi",
                            Gender = 0,
                            Idnumber = "8307070225083",
                            LastName = "Moloi",
                            MainMemberId = 2,
                            MedicalAidStatus = false,
                            MobileNumber = "0772458796",
                            PersonResponsible = "Jacob Moloi",
                            SuburbId = 127
                        },
                        new
                        {
                            DependentId = 96,
                            AddressLine1 = "24 7th Avenue",
                            DependentTypeId = 1007,
                            Dob = new DateTime(2011, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Thabo",
                            Gender = 1,
                            Idnumber = "1107090225083",
                            LastName = "Moloi",
                            MainMemberId = 2,
                            MedicalAidStatus = false,
                            MobileNumber = "0822458796",
                            PersonResponsible = "Jacob Moloi",
                            SuburbId = 127
                        });
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.DependentType", b =>
                {
                    b.Property<int>("DependentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DependentTypeId");

                    b.ToTable("DependentType");

                    b.HasData(
                        new
                        {
                            DependentTypeId = 1001,
                            Description = "Spouse"
                        },
                        new
                        {
                            DependentTypeId = 1002,
                            Description = "Child"
                        },
                        new
                        {
                            DependentTypeId = 1003,
                            Description = "Parent"
                        },
                        new
                        {
                            DependentTypeId = 1004,
                            Description = "Grandparent"
                        },
                        new
                        {
                            DependentTypeId = 1005,
                            Description = "Cousin"
                        },
                        new
                        {
                            DependentTypeId = 1006,
                            Description = "Sibling"
                        },
                        new
                        {
                            DependentTypeId = 1007,
                            Description = "Grandchild"
                        });
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.LabUser", b =>
                {
                    b.Property<int>("LabUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Idnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LabUserId");

                    b.ToTable("LabUser");

                    b.HasData(
                        new
                        {
                            LabUserId = 1,
                            FirstName = "Mandla",
                            Idnumber = "79052520225083",
                            LastName = "Khumalo",
                            MobileNumber = "0912458796",
                            UserID = "b99be5c3-fb63-4c73-b846-83af447ff43e"
                        });
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.MedicalAidPlan", b =>
                {
                    b.Property<int>("MedicalAidPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalAidSchemeId")
                        .HasColumnType("int");

                    b.HasKey("MedicalAidPlanId");

                    b.HasIndex("MedicalAidSchemeId");

                    b.ToTable("MedicalAidPlans");

                    b.HasData(
                        new
                        {
                            MedicalAidPlanId = 1,
                            Description = "Beat 1",
                            MedicalAidSchemeId = 1
                        },
                        new
                        {
                            MedicalAidPlanId = 2,
                            Description = "Beat 2",
                            MedicalAidSchemeId = 1
                        },
                        new
                        {
                            MedicalAidPlanId = 3,
                            Description = "Beat 3",
                            MedicalAidSchemeId = 1
                        },
                        new
                        {
                            MedicalAidPlanId = 4,
                            Description = "Beat 4",
                            MedicalAidSchemeId = 1
                        },
                        new
                        {
                            MedicalAidPlanId = 5,
                            Description = "Pulse 1",
                            MedicalAidSchemeId = 1
                        },
                        new
                        {
                            MedicalAidPlanId = 6,
                            Description = "Pulse 2",
                            MedicalAidSchemeId = 1
                        },
                        new
                        {
                            MedicalAidPlanId = 7,
                            Description = "Pace 1",
                            MedicalAidSchemeId = 1
                        },
                        new
                        {
                            MedicalAidPlanId = 8,
                            Description = "Pace 2",
                            MedicalAidSchemeId = 1
                        },
                        new
                        {
                            MedicalAidPlanId = 9,
                            Description = "Pace 3",
                            MedicalAidSchemeId = 1
                        },
                        new
                        {
                            MedicalAidPlanId = 10,
                            Description = "Pace 4",
                            MedicalAidSchemeId = 1
                        },
                        new
                        {
                            MedicalAidPlanId = 11,
                            Description = "BonStart",
                            MedicalAidSchemeId = 2
                        },
                        new
                        {
                            MedicalAidPlanId = 12,
                            Description = "Primary",
                            MedicalAidSchemeId = 2
                        },
                        new
                        {
                            MedicalAidPlanId = 13,
                            Description = "Primary Select",
                            MedicalAidSchemeId = 2
                        },
                        new
                        {
                            MedicalAidPlanId = 14,
                            Description = "Standard",
                            MedicalAidSchemeId = 2
                        },
                        new
                        {
                            MedicalAidPlanId = 15,
                            Description = "Standard Select",
                            MedicalAidSchemeId = 2
                        },
                        new
                        {
                            MedicalAidPlanId = 16,
                            Description = "BonFit Select",
                            MedicalAidSchemeId = 2
                        },
                        new
                        {
                            MedicalAidPlanId = 17,
                            Description = "BonSave",
                            MedicalAidSchemeId = 2
                        },
                        new
                        {
                            MedicalAidPlanId = 18,
                            Description = "BonComplete",
                            MedicalAidSchemeId = 2
                        },
                        new
                        {
                            MedicalAidPlanId = 19,
                            Description = "BonClassic",
                            MedicalAidSchemeId = 2
                        },
                        new
                        {
                            MedicalAidPlanId = 20,
                            Description = "BonFitComprehensive",
                            MedicalAidSchemeId = 2
                        },
                        new
                        {
                            MedicalAidPlanId = 21,
                            Description = "Hospital Standard",
                            MedicalAidSchemeId = 2
                        },
                        new
                        {
                            MedicalAidPlanId = 22,
                            Description = "BonEssential",
                            MedicalAidSchemeId = 2
                        },
                        new
                        {
                            MedicalAidPlanId = 23,
                            Description = "BonEssentialSelect",
                            MedicalAidSchemeId = 2
                        },
                        new
                        {
                            MedicalAidPlanId = 24,
                            Description = "BonCap",
                            MedicalAidSchemeId = 2
                        },
                        new
                        {
                            MedicalAidPlanId = 25,
                            Description = "Executive",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 26,
                            Description = "Classic Comprehensive",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 27,
                            Description = "Classic Data Comprehensive",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 28,
                            Description = "Classic Smart Comprehensive",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 29,
                            Description = "Essential Comprehensive",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 30,
                            Description = "Essential Data",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 31,
                            Description = "Classic Priority",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 32,
                            Description = "Essential Priority",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 33,
                            Description = "Classic Saver",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 34,
                            Description = "Classic Delta Saver",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 35,
                            Description = "Essential Saver",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 36,
                            Description = "Essential Delta Saver",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 37,
                            Description = "Coastal Saver",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 38,
                            Description = "Classic Smart",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 39,
                            Description = "Essential Smart",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 40,
                            Description = "Classic Core",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 41,
                            Description = "Classic Delta Core",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 42,
                            Description = "Essential Core",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 43,
                            Description = "Essential Delta Core",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 44,
                            Description = "Coastal Core",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 45,
                            Description = "Keycare Plus",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 46,
                            Description = "Keycare Smart",
                            MedicalAidSchemeId = 3
                        },
                        new
                        {
                            MedicalAidPlanId = 47,
                            Description = "Keycare Core",
                            MedicalAidSchemeId = 3
                        });
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.MedicalAidScheme", b =>
                {
                    b.Property<int>("MedicalAidSchemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalAidSchemeId");

                    b.ToTable("MedicalAidSchemes");

                    b.HasData(
                        new
                        {
                            MedicalAidSchemeId = 1,
                            Description = "BestMed"
                        },
                        new
                        {
                            MedicalAidSchemeId = 2,
                            Description = "Bonitas"
                        },
                        new
                        {
                            MedicalAidSchemeId = 3,
                            Description = "Discovery Health"
                        });
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.Nurse", b =>
                {
                    b.Property<int>("NurseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Idnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("SuburbId")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("YearQualified")
                        .HasColumnType("datetime2");

                    b.HasKey("NurseId");

                    b.ToTable("Nurses");

                    b.HasData(
                        new
                        {
                            NurseId = 1,
                            FirstName = "Dorothy",
                            Idnumber = "7503180225083",
                            LastName = "Daniels",
                            MobileNumber = "0512458796",
                            Rank = 2,
                            SuburbId = 126,
                            UserID = "7c805a02-1b05-4def-b38d-0a91c402167c",
                            YearQualified = new DateTime(1992, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            NurseId = 2,
                            FirstName = "Lindile",
                            Idnumber = "7603180225083",
                            LastName = "Hadebe",
                            MobileNumber = "0522458796",
                            Rank = 2,
                            SuburbId = 73,
                            UserID = "431f6523-88b4-463e-a09e-6e174e09f6fa",
                            YearQualified = new DateTime(1997, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            NurseId = 3,
                            FirstName = "Marcel",
                            Idnumber = "7703180225083",
                            LastName = "Van Niekerk",
                            MobileNumber = "0532458796",
                            Rank = 0,
                            SuburbId = 43,
                            UserID = "6605428b-3b95-4072-9e26-23b357a21117",
                            YearQualified = new DateTime(2003, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.NurseSchedule", b =>
                {
                    b.Property<int>("TestRequestId")
                        .HasColumnType("int");

                    b.Property<int>("NurseId")
                        .HasColumnType("int");

                    b.HasKey("TestRequestId", "NurseId");

                    b.HasIndex("NurseId");

                    b.ToTable("NurseSchedules");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DependencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Idnumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalAidNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MedicalAidPlanId")
                        .HasColumnType("int");

                    b.Property<bool>("MedicalAidStatus")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PersonResponsible")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuburbId")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("MedicalAidPlanId");

                    b.HasIndex("SuburbId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            AddressLine1 = "19 Admirality Way",
                            DependencyCode = "00",
                            Dob = new DateTime(1955, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Charmaine",
                            Gender = 0,
                            Idnumber = "5503180225083",
                            LastName = "Meintjies",
                            MedicalAidNo = "285465885",
                            MedicalAidPlanId = 8,
                            MedicalAidStatus = true,
                            MobileNumber = "0832458796",
                            PersonResponsible = "Charmaine Meintjies",
                            SuburbId = 126,
                            UserID = "03cec2e5-888a-4a7c-a435-03eb22b0fbe6"
                        },
                        new
                        {
                            PatientId = 2,
                            AddressLine1 = "24 7th Avenue",
                            Dob = new DateTime(1980, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jacob",
                            Gender = 1,
                            Idnumber = "8012010225083",
                            LastName = "Moloi",
                            MedicalAidStatus = false,
                            MobileNumber = "0822458796",
                            PersonResponsible = "Jacob Moloi",
                            SuburbId = 127,
                            UserID = "4021c065-e9dc-4eac-a55a-c4da9aa92ff3"
                        },
                        new
                        {
                            PatientId = 3,
                            AddressLine1 = "1 Harbor Cottages",
                            AddressLine2 = "Sayre Crescent",
                            Dob = new DateTime(1980, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "David",
                            Gender = 1,
                            Idnumber = "8002200225083",
                            LastName = "Greeff",
                            MedicalAidStatus = false,
                            MobileNumber = "0712458796",
                            PersonResponsible = "David Greeff",
                            SuburbId = 56,
                            UserID = "c6b10bd1-3b3d-471d-bc80-6124281b0ac1"
                        },
                        new
                        {
                            PatientId = 4,
                            AddressLine1 = "27 Aspen Complex",
                            AddressLine2 = "La Roche Drive",
                            Dob = new DateTime(1976, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Kopano",
                            Gender = 1,
                            Idnumber = "7606030225083",
                            LastName = "Sithole",
                            MedicalAidStatus = false,
                            MobileNumber = "0722458796",
                            PersonResponsible = "Kopano Sithole",
                            SuburbId = 57,
                            UserID = "e36685da-9d7e-4caf-8cb8-b51962676845"
                        },
                        new
                        {
                            PatientId = 5,
                            AddressLine1 = "6 Rubin Crescent",
                            Dob = new DateTime(1985, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Karien",
                            Gender = 0,
                            Idnumber = "8509020225083",
                            LastName = "Momberg",
                            MedicalAidStatus = false,
                            MobileNumber = "0732458796",
                            PersonResponsible = "Karien Momberg",
                            SuburbId = 126,
                            UserID = "67395a1f-9011-4a3d-8c07-efec7d97b240"
                        },
                        new
                        {
                            PatientId = 6,
                            AddressLine1 = "28 7th Avenue",
                            Dob = new DateTime(1975, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Felicity",
                            Gender = 0,
                            Idnumber = "7512020225083",
                            LastName = "Daniels",
                            MedicalAidStatus = false,
                            MobileNumber = "0612458796",
                            PersonResponsible = "Felicity Daniels",
                            SuburbId = 127,
                            UserID = "391f693d-644d-4935-95ae-c8e50062b987"
                        },
                        new
                        {
                            PatientId = 7,
                            AddressLine1 = "37 The Beaches",
                            AddressLine2 = "Beach Road",
                            Dob = new DateTime(1960, 8, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Errol",
                            Gender = 1,
                            Idnumber = "6008090225083",
                            LastName = "Pieterse",
                            MedicalAidStatus = false,
                            MobileNumber = "0612458796",
                            PersonResponsible = "Errol Pieterse",
                            SuburbId = 56,
                            UserID = "233ca6e9-9697-4f03-9b01-d20e4db76b41"
                        },
                        new
                        {
                            PatientId = 8,
                            AddressLine1 = "12 Marshall Road",
                            DependencyCode = "00",
                            Dob = new DateTime(1964, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alyce",
                            Gender = 0,
                            Idnumber = "6412120225083",
                            LastName = "Morapedi",
                            MedicalAidNo = "395465885",
                            MedicalAidPlanId = 17,
                            MedicalAidStatus = true,
                            MobileNumber = "0632458796",
                            PersonResponsible = "Alyce Morapedi",
                            SuburbId = 57,
                            UserID = "1320196b-a77c-429c-b10e-bd2260e3979c"
                        },
                        new
                        {
                            PatientId = 9,
                            AddressLine1 = "13 Congo Avenue",
                            DependencyCode = "00",
                            Dob = new DateTime(1983, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Asha",
                            Gender = 0,
                            Idnumber = "8302090225083",
                            LastName = "Sharma",
                            MedicalAidNo = "175465885",
                            MedicalAidPlanId = 44,
                            MedicalAidStatus = true,
                            MobileNumber = "0812458796",
                            PersonResponsible = "Asha Sharma",
                            SuburbId = 84,
                            UserID = "def67f92-1208-48d3-a001-fd66ed0ed827"
                        },
                        new
                        {
                            PatientId = 10,
                            AddressLine1 = "29 Peace Street",
                            Dob = new DateTime(1950, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Carlos",
                            Gender = 1,
                            Idnumber = "5008100225083",
                            LastName = "Perestrelo",
                            MedicalAidStatus = false,
                            MobileNumber = "0842458796",
                            PersonResponsible = "Carlos Perestrelo",
                            SuburbId = 84,
                            UserID = "42412d47-3da8-4e21-beef-83555c3a7186"
                        },
                        new
                        {
                            PatientId = 11,
                            AddressLine1 = "7 Jacks Road",
                            Dob = new DateTime(1971, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Kabelo",
                            Gender = 1,
                            Idnumber = "7112150225083",
                            LastName = "Padi",
                            MedicalAidStatus = false,
                            MobileNumber = "0742458796",
                            PersonResponsible = "Kabelo Padi",
                            SuburbId = 84,
                            UserID = "30fb49a6-9b10-468b-9181-457568111ae1"
                        },
                        new
                        {
                            PatientId = 12,
                            AddressLine1 = "45 Columbia Crescent",
                            DependencyCode = "00",
                            Dob = new DateTime(1991, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Pulane",
                            Gender = 0,
                            Idnumber = "9110120225083",
                            LastName = "Masemola",
                            MedicalAidNo = "465465885",
                            MedicalAidPlanId = 1,
                            MedicalAidStatus = true,
                            MobileNumber = "0642458796",
                            PersonResponsible = "Pulane Masemola",
                            SuburbId = 84,
                            UserID = "bc6d851f-4321-4b32-86ec-6a305f3d77bb"
                        });
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.Suburb", b =>
                {
                    b.Property<int>("SuburbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuburbName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SuburbId");

                    b.HasIndex("CityId");

                    b.ToTable("Suburbs");

                    b.HasData(
                        new
                        {
                            SuburbId = 1,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Adcock Vale"
                        },
                        new
                        {
                            SuburbId = 2,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Algoa Park"
                        },
                        new
                        {
                            SuburbId = 3,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Arcadia"
                        },
                        new
                        {
                            SuburbId = 4,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Aspen Heights"
                        },
                        new
                        {
                            SuburbId = 5,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Ben Kamma"
                        },
                        new
                        {
                            SuburbId = 6,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Bethelsdorp"
                        },
                        new
                        {
                            SuburbId = 7,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Beverly Grove"
                        },
                        new
                        {
                            SuburbId = 8,
                            CityId = 1,
                            PostalCode = "6020",
                            SuburbName = "Beverly Hills"
                        },
                        new
                        {
                            SuburbId = 9,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Bloemendal"
                        },
                        new
                        {
                            SuburbId = 10,
                            CityId = 1,
                            PostalCode = "6210",
                            SuburbName = "Bluewater BAY"
                        },
                        new
                        {
                            SuburbId = 11,
                            CityId = 1,
                            PostalCode = "6200",
                            SuburbName = "Boast Village"
                        },
                        new
                        {
                            SuburbId = 12,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Booysens Park"
                        },
                        new
                        {
                            SuburbId = 13,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Bramhope"
                        },
                        new
                        {
                            SuburbId = 14,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Brentwood Park"
                        },
                        new
                        {
                            SuburbId = 15,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Bridgemead"
                        },
                        new
                        {
                            SuburbId = 16,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Broadwood"
                        },
                        new
                        {
                            SuburbId = 17,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Brymore"
                        },
                        new
                        {
                            SuburbId = 18,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Cadles"
                        },
                        new
                        {
                            SuburbId = 19,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Castle Hill"
                        },
                        new
                        {
                            SuburbId = 20,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Centralhil"
                        },
                        new
                        {
                            SuburbId = 21,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Central"
                        },
                        new
                        {
                            SuburbId = 22,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Charlo"
                        },
                        new
                        {
                            SuburbId = 23,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Chatty"
                        },
                        new
                        {
                            SuburbId = 24,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Cleary Park"
                        },
                        new
                        {
                            SuburbId = 25,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Collen Glen"
                        },
                        new
                        {
                            SuburbId = 26,
                            CityId = 1,
                            PostalCode = "6045",
                            SuburbName = "Cotswold"
                        },
                        new
                        {
                            SuburbId = 27,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Cradock Place"
                        },
                        new
                        {
                            SuburbId = 28,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Cradockplek"
                        },
                        new
                        {
                            SuburbId = 29,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Craigbain"
                        },
                        new
                        {
                            SuburbId = 30,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Crestview"
                        },
                        new
                        {
                            SuburbId = 31,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Dowerville"
                        },
                        new
                        {
                            SuburbId = 32,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Emerald Hill"
                        },
                        new
                        {
                            SuburbId = 33,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Essexvale"
                        },
                        new
                        {
                            SuburbId = 34,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Fairview"
                        },
                        new
                        {
                            SuburbId = 35,
                            CityId = 1,
                            PostalCode = "6045",
                            SuburbName = "Ferguson"
                        },
                        new
                        {
                            SuburbId = 36,
                            CityId = 1,
                            PostalCode = "6045",
                            SuburbName = "Fernglen"
                        },
                        new
                        {
                            SuburbId = 37,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Fernwood Park"
                        },
                        new
                        {
                            SuburbId = 38,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Forest Hill"
                        },
                        new
                        {
                            SuburbId = 39,
                            CityId = 1,
                            PostalCode = "6045",
                            SuburbName = "Framesby"
                        },
                        new
                        {
                            SuburbId = 40,
                            CityId = 1,
                            PostalCode = "6045",
                            SuburbName = "Francis Evatt Park"
                        },
                        new
                        {
                            SuburbId = 41,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Gambleville"
                        },
                        new
                        {
                            SuburbId = 42,
                            CityId = 1,
                            PostalCode = "6020",
                            SuburbName = "Gelvan Park"
                        },
                        new
                        {
                            SuburbId = 43,
                            CityId = 1,
                            PostalCode = "6020",
                            SuburbName = "Gelvandale"
                        },
                        new
                        {
                            SuburbId = 44,
                            CityId = 1,
                            PostalCode = "6045",
                            SuburbName = "Glen Hurd"
                        },
                        new
                        {
                            SuburbId = 45,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Glen Kamma"
                        },
                        new
                        {
                            SuburbId = 46,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Gledinningvale"
                        },
                        new
                        {
                            SuburbId = 47,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Glenroy Park"
                        },
                        new
                        {
                            SuburbId = 48,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Goldwater"
                        },
                        new
                        {
                            SuburbId = 49,
                            CityId = 1,
                            PostalCode = "6045",
                            SuburbName = "Greenacres"
                        },
                        new
                        {
                            SuburbId = 50,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Greenbushes"
                        },
                        new
                        {
                            SuburbId = 51,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Greenshields Park"
                        },
                        new
                        {
                            SuburbId = 52,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Heath Park"
                        },
                        new
                        {
                            SuburbId = 53,
                            CityId = 1,
                            PostalCode = "6020",
                            SuburbName = "Helenvale"
                        },
                        new
                        {
                            SuburbId = 54,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Hillside"
                        },
                        new
                        {
                            SuburbId = 55,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Holland Park"
                        },
                        new
                        {
                            SuburbId = 56,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Humerail"
                        },
                        new
                        {
                            SuburbId = 57,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Humewood"
                        },
                        new
                        {
                            SuburbId = 58,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Hunters Retreat"
                        },
                        new
                        {
                            SuburbId = 59,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Kabega"
                        },
                        new
                        {
                            SuburbId = 60,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Kamma Creek"
                        },
                        new
                        {
                            SuburbId = 61,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Kamma Park"
                        },
                        new
                        {
                            SuburbId = 62,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Kamma Ridge"
                        },
                        new
                        {
                            SuburbId = 63,
                            CityId = 1,
                            PostalCode = "6211",
                            SuburbName = "Kamvelihle"
                        },
                        new
                        {
                            SuburbId = 64,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Kemsley Park"
                        },
                        new
                        {
                            SuburbId = 65,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Kensington"
                        },
                        new
                        {
                            SuburbId = 66,
                            CityId = 1,
                            PostalCode = "6020",
                            SuburbName = "Korsten"
                        },
                        new
                        {
                            SuburbId = 67,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Kunene Park"
                        },
                        new
                        {
                            SuburbId = 68,
                            CityId = 1,
                            PostalCode = "6200",
                            SuburbName = "Kwaford"
                        },
                        new
                        {
                            SuburbId = 69,
                            CityId = 1,
                            PostalCode = "6205",
                            SuburbName = "Kwazakhele"
                        },
                        new
                        {
                            SuburbId = 70,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Linkside"
                        },
                        new
                        {
                            SuburbId = 71,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Linton Grange"
                        },
                        new
                        {
                            SuburbId = 72,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Listerwood"
                        },
                        new
                        {
                            SuburbId = 73,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Lorraine"
                        },
                        new
                        {
                            SuburbId = 74,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Lorraine Manor"
                        },
                        new
                        {
                            SuburbId = 75,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Lovemore Heights"
                        },
                        new
                        {
                            SuburbId = 76,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Lovemore Park"
                        },
                        new
                        {
                            SuburbId = 77,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Macleanville"
                        },
                        new
                        {
                            SuburbId = 78,
                            CityId = 1,
                            PostalCode = "6020",
                            SuburbName = "Malabar"
                        },
                        new
                        {
                            SuburbId = 79,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Mangold Park"
                        },
                        new
                        {
                            SuburbId = 80,
                            CityId = 1,
                            PostalCode = "6200",
                            SuburbName = "Mcnamee Village"
                        },
                        new
                        {
                            SuburbId = 81,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Mill Park"
                        },
                        new
                        {
                            SuburbId = 82,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Millard Grange"
                        },
                        new
                        {
                            SuburbId = 83,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Miramar"
                        },
                        new
                        {
                            SuburbId = 84,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Missionvale"
                        },
                        new
                        {
                            SuburbId = 85,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Moregrove"
                        },
                        new
                        {
                            SuburbId = 86,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Morningside"
                        },
                        new
                        {
                            SuburbId = 87,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Motherwell"
                        },
                        new
                        {
                            SuburbId = 88,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Mount Croix"
                        },
                        new
                        {
                            SuburbId = 89,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Mount Pleasant"
                        },
                        new
                        {
                            SuburbId = 90,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Neave"
                        },
                        new
                        {
                            SuburbId = 91,
                            CityId = 1,
                            PostalCode = "6200",
                            SuburbName = "New Brighton"
                        },
                        new
                        {
                            SuburbId = 92,
                            CityId = 1,
                            PostalCode = "6045",
                            SuburbName = "Newton Park"
                        },
                        new
                        {
                            SuburbId = 93,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Normanville"
                        },
                        new
                        {
                            SuburbId = 94,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "North End"
                        },
                        new
                        {
                            SuburbId = 95,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Palm Ridge"
                        },
                        new
                        {
                            SuburbId = 96,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Pari Park"
                        },
                        new
                        {
                            SuburbId = 97,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Park Drive"
                        },
                        new
                        {
                            SuburbId = 98,
                            CityId = 1,
                            PostalCode = "6020",
                            SuburbName = "Parkside"
                        },
                        new
                        {
                            SuburbId = 99,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Parsons Vlei"
                        },
                        new
                        {
                            SuburbId = 100,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Parsons Hill"
                        },
                        new
                        {
                            SuburbId = 101,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Perridgevale"
                        },
                        new
                        {
                            SuburbId = 102,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Pinegrove"
                        },
                        new
                        {
                            SuburbId = 103,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Providentia"
                        },
                        new
                        {
                            SuburbId = 104,
                            CityId = 1,
                            PostalCode = "6201",
                            SuburbName = "Redhouse"
                        },
                        new
                        {
                            SuburbId = 105,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Retiefville"
                        },
                        new
                        {
                            SuburbId = 106,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Richmond Hill"
                        },
                        new
                        {
                            SuburbId = 107,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Richmond Park"
                        },
                        new
                        {
                            SuburbId = 108,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Rowallan Park"
                        },
                        new
                        {
                            SuburbId = 109,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Rufanevale"
                        },
                        new
                        {
                            SuburbId = 110,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Salisbury Park"
                        },
                        new
                        {
                            SuburbId = 111,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Salsoneville"
                        },
                        new
                        {
                            SuburbId = 112,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Salt Lake"
                        },
                        new
                        {
                            SuburbId = 113,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Saltville"
                        },
                        new
                        {
                            SuburbId = 114,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Sanctor"
                        },
                        new
                        {
                            SuburbId = 115,
                            CityId = 1,
                            PostalCode = "6020",
                            SuburbName = "Schauderville"
                        },
                        new
                        {
                            SuburbId = 116,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Sea View"
                        },
                        new
                        {
                            SuburbId = 117,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Sherwood"
                        },
                        new
                        {
                            SuburbId = 118,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Sidwell"
                        },
                        new
                        {
                            SuburbId = 119,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "South End"
                        },
                        new
                        {
                            SuburbId = 120,
                            CityId = 1,
                            PostalCode = "6020",
                            SuburbName = "Springdale"
                        },
                        new
                        {
                            SuburbId = 121,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Springfield"
                        },
                        new
                        {
                            SuburbId = 122,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "ST Georges"
                        },
                        new
                        {
                            SuburbId = 123,
                            CityId = 1,
                            PostalCode = "6045",
                            SuburbName = "Stella Londt Park"
                        },
                        new
                        {
                            SuburbId = 124,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Steytler"
                        },
                        new
                        {
                            SuburbId = 125,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Struandale"
                        },
                        new
                        {
                            SuburbId = 126,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Summerstrand"
                        },
                        new
                        {
                            SuburbId = 127,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Summerwood"
                        },
                        new
                        {
                            SuburbId = 128,
                            CityId = 1,
                            PostalCode = "6045",
                            SuburbName = "Sunridge Park"
                        },
                        new
                        {
                            SuburbId = 129,
                            CityId = 1,
                            PostalCode = "6210",
                            SuburbName = "Swartkops"
                        },
                        new
                        {
                            SuburbId = 130,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Sydenham"
                        },
                        new
                        {
                            SuburbId = 131,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Taybank"
                        },
                        new
                        {
                            SuburbId = 132,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Theescombe"
                        },
                        new
                        {
                            SuburbId = 133,
                            CityId = 1,
                            PostalCode = "6059",
                            SuburbName = "Timothy Valley"
                        },
                        new
                        {
                            SuburbId = 134,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Treehaven"
                        },
                        new
                        {
                            SuburbId = 135,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Trevolen"
                        },
                        new
                        {
                            SuburbId = 136,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Vikingvale"
                        },
                        new
                        {
                            SuburbId = 137,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Walmer"
                        },
                        new
                        {
                            SuburbId = 138,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Walmer Downs"
                        },
                        new
                        {
                            SuburbId = 139,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Walmer Heights"
                        },
                        new
                        {
                            SuburbId = 140,
                            CityId = 1,
                            PostalCode = "6211",
                            SuburbName = "Wells Estate"
                        },
                        new
                        {
                            SuburbId = 141,
                            CityId = 1,
                            PostalCode = "6025",
                            SuburbName = "Westering"
                        },
                        new
                        {
                            SuburbId = 142,
                            CityId = 1,
                            PostalCode = "6045",
                            SuburbName = "Westview"
                        },
                        new
                        {
                            SuburbId = 143,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Weybridge Park"
                        },
                        new
                        {
                            SuburbId = 144,
                            CityId = 1,
                            PostalCode = "6070",
                            SuburbName = "Woodlands"
                        },
                        new
                        {
                            SuburbId = 145,
                            CityId = 1,
                            PostalCode = "6020",
                            SuburbName = "Woolhope"
                        },
                        new
                        {
                            SuburbId = 146,
                            CityId = 1,
                            PostalCode = "6001",
                            SuburbName = "Young Park"
                        },
                        new
                        {
                            SuburbId = 147,
                            CityId = 1,
                            PostalCode = "6201",
                            SuburbName = "Zwide"
                        });
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.SuburbsPreffered", b =>
                {
                    b.Property<int>("NurseId")
                        .HasColumnType("int");

                    b.Property<int>("SuburbId")
                        .HasColumnType("int");

                    b.HasKey("NurseId", "SuburbId");

                    b.HasIndex("SuburbId");

                    b.ToTable("SuburbsPreffereds");

                    b.HasData(
                        new
                        {
                            NurseId = 1,
                            SuburbId = 126
                        },
                        new
                        {
                            NurseId = 1,
                            SuburbId = 127
                        },
                        new
                        {
                            NurseId = 1,
                            SuburbId = 56
                        },
                        new
                        {
                            NurseId = 1,
                            SuburbId = 57
                        },
                        new
                        {
                            NurseId = 3,
                            SuburbId = 91
                        });
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodPressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LabUserId")
                        .HasColumnType("int");

                    b.Property<int>("OxygenLevel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResultDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TestRequestId")
                        .HasColumnType("int");

                    b.Property<string>("TestResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TestTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TestId");

                    b.HasIndex("LabUserId");

                    b.HasIndex("TestRequestId")
                        .IsUnique();

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            TestId = 1,
                            BarCode = "COV-ABC-1010-01",
                            BloodPressure = "124/79",
                            LabUserId = 1,
                            OxygenLevel = 95,
                            ResultDate = new DateTime(2021, 2, 3, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 37.5,
                            TestDate = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestRequestId = 16,
                            TestResult = "Positive",
                            TestTime = new DateTime(2021, 2, 1, 10, 15, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TestId = 2,
                            BarCode = "COV-ABC-1010-02",
                            BloodPressure = "120/80",
                            LabUserId = 1,
                            OxygenLevel = 97,
                            ResultDate = new DateTime(2021, 2, 3, 8, 5, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 38.200000000000003,
                            TestDate = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestRequestId = 17,
                            TestResult = "Positive",
                            TestTime = new DateTime(2021, 2, 1, 10, 35, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TestId = 3,
                            BarCode = "COV-ABC-1010-03",
                            BloodPressure = "124/79",
                            LabUserId = 1,
                            OxygenLevel = 99,
                            ResultDate = new DateTime(2021, 2, 3, 8, 5, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 34.600000000000001,
                            TestDate = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestRequestId = 18,
                            TestResult = "Negative",
                            TestTime = new DateTime(2021, 2, 1, 10, 48, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TestId = 4,
                            BarCode = "COV-ABC-1010-04",
                            BloodPressure = "120/80",
                            LabUserId = 1,
                            OxygenLevel = 99,
                            ResultDate = new DateTime(2021, 2, 3, 8, 5, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 35.799999999999997,
                            TestDate = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestRequestId = 19,
                            TestResult = "Negative",
                            TestTime = new DateTime(2021, 2, 1, 11, 10, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TestId = 5,
                            BarCode = "COV-ABC-1010-05",
                            BloodPressure = "124/79",
                            LabUserId = 1,
                            OxygenLevel = 90,
                            ResultDate = new DateTime(2021, 2, 3, 8, 12, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 37.899999999999999,
                            TestDate = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestRequestId = 20,
                            TestResult = "Positive",
                            TestTime = new DateTime(2021, 2, 1, 11, 29, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TestId = 6,
                            BarCode = "COV-ABC-1020-01",
                            BloodPressure = "120/80",
                            LabUserId = 1,
                            OxygenLevel = 100,
                            ResultDate = new DateTime(2021, 2, 15, 9, 12, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 35.100000000000001,
                            TestDate = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestRequestId = 21,
                            TestResult = "Negative",
                            TestTime = new DateTime(2021, 2, 13, 12, 11, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TestId = 7,
                            BarCode = "COV-ABC-1020-02",
                            BloodPressure = "124/79",
                            LabUserId = 1,
                            OxygenLevel = 92,
                            ResultDate = new DateTime(2021, 2, 15, 8, 12, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 36.899999999999999,
                            TestDate = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestRequestId = 22,
                            TestResult = "Positive",
                            TestTime = new DateTime(2021, 2, 13, 10, 11, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TestId = 8,
                            BarCode = "COV-ABC-1020-03",
                            BloodPressure = "120/80",
                            LabUserId = 1,
                            OxygenLevel = 91,
                            ResultDate = new DateTime(2021, 2, 15, 8, 12, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 37.399999999999999,
                            TestDate = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestRequestId = 23,
                            TestResult = "Positive",
                            TestTime = new DateTime(2021, 2, 13, 10, 37, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TestId = 9,
                            BarCode = "COV-ABC-1020-04",
                            BloodPressure = "124/79",
                            LabUserId = 1,
                            OxygenLevel = 93,
                            ResultDate = new DateTime(2021, 2, 15, 8, 19, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 38.100000000000001,
                            TestDate = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestRequestId = 24,
                            TestResult = "Positive",
                            TestTime = new DateTime(2021, 2, 13, 11, 1, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TestId = 10,
                            BarCode = "COV-ABC-1020-05",
                            BloodPressure = "120/80",
                            LabUserId = 1,
                            OxygenLevel = 100,
                            ResultDate = new DateTime(2021, 2, 15, 9, 17, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 34.5,
                            TestDate = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestRequestId = 25,
                            TestResult = "Negative",
                            TestTime = new DateTime(2021, 2, 13, 12, 55, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TestId = 11,
                            BarCode = "COV-ABC-1020-06",
                            BloodPressure = "124/79",
                            LabUserId = 1,
                            OxygenLevel = 91,
                            ResultDate = new DateTime(2021, 2, 15, 9, 12, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 37.200000000000003,
                            TestDate = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestRequestId = 26,
                            TestResult = "Positive",
                            TestTime = new DateTime(2021, 2, 13, 13, 11, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TestId = 12,
                            BarCode = "COV-ABC-1030-07",
                            BloodPressure = "120/80",
                            LabUserId = 1,
                            OxygenLevel = 99,
                            ResultDate = new DateTime(2021, 2, 15, 9, 12, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 34.200000000000003,
                            TestDate = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestRequestId = 27,
                            TestResult = "Negative",
                            TestTime = new DateTime(2021, 2, 13, 13, 29, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TestId = 13,
                            BarCode = "COV-ABC-1030-08",
                            BloodPressure = "124/79",
                            LabUserId = 1,
                            OxygenLevel = 92,
                            ResultDate = new DateTime(2021, 2, 15, 9, 12, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 38.200000000000003,
                            TestDate = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestRequestId = 28,
                            TestResult = "Positive",
                            TestTime = new DateTime(2021, 2, 13, 13, 46, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TestId = 14,
                            BarCode = "COV-ABC-1030-09",
                            BloodPressure = "120/80",
                            LabUserId = 1,
                            OxygenLevel = 93,
                            ResultDate = new DateTime(2021, 3, 1, 7, 12, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 37.899999999999999,
                            TestDate = new DateTime(2021, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestRequestId = 29,
                            TestResult = "Positive",
                            TestTime = new DateTime(2021, 2, 28, 14, 20, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TestId = 15,
                            BarCode = "COV-ABC-1030-09",
                            BloodPressure = "124/79",
                            LabUserId = 1,
                            OxygenLevel = 94,
                            ResultDate = new DateTime(2021, 3, 1, 7, 28, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 38.5,
                            TestDate = new DateTime(2021, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TestRequestId = 30,
                            TestResult = "Positive",
                            TestTime = new DateTime(2021, 2, 28, 14, 41, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.TestRequest", b =>
                {
                    b.Property<int>("TestRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CalenderEventID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DependentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NurseId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SuburbId")
                        .HasColumnType("int");

                    b.Property<string>("TestAddress1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestRequestId");

                    b.HasIndex("DependentId");

                    b.HasIndex("NurseId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SuburbId");

                    b.ToTable("TestRequests");

                    b.HasData(
                        new
                        {
                            TestRequestId = 1,
                            CalenderEventID = 1,
                            DateAssigned = new DateTime(2021, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2021, 11, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 1,
                            RequestDate = new DateTime(2021, 11, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 3,
                            StartTime = new DateTime(2021, 11, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 126,
                            TestAddress1 = "19 Admirality Way"
                        },
                        new
                        {
                            TestRequestId = 2,
                            CalenderEventID = 2,
                            DateAssigned = new DateTime(2021, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DependentId = 91,
                            EndTime = new DateTime(2021, 11, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 1,
                            RequestDate = new DateTime(2021, 11, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 3,
                            StartTime = new DateTime(2021, 11, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 126,
                            TestAddress1 = "19 Admirality Way"
                        },
                        new
                        {
                            TestRequestId = 3,
                            CalenderEventID = 3,
                            DateAssigned = new DateTime(2021, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DependentId = 92,
                            EndTime = new DateTime(2021, 11, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 1,
                            RequestDate = new DateTime(2021, 11, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 3,
                            StartTime = new DateTime(2021, 11, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 126,
                            TestAddress1 = "19 Admirality Way"
                        },
                        new
                        {
                            TestRequestId = 4,
                            CalenderEventID = 4,
                            DateAssigned = new DateTime(2021, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DependentId = 93,
                            EndTime = new DateTime(2021, 11, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 1,
                            RequestDate = new DateTime(2021, 11, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 3,
                            StartTime = new DateTime(2021, 11, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 126,
                            TestAddress1 = "19 Admirality Way"
                        },
                        new
                        {
                            TestRequestId = 5,
                            CalenderEventID = 5,
                            DateAssigned = new DateTime(2021, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DependentId = 94,
                            EndTime = new DateTime(2021, 11, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 1,
                            RequestDate = new DateTime(2021, 11, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 3,
                            StartTime = new DateTime(2021, 11, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 126,
                            TestAddress1 = "19 Admirality Way"
                        },
                        new
                        {
                            TestRequestId = 6,
                            CalenderEventID = 6,
                            DateAssigned = new DateTime(2021, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2021, 11, 12, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 3,
                            RequestDate = new DateTime(2021, 11, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 3,
                            StartTime = new DateTime(2021, 11, 12, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 56,
                            TestAddress1 = "1 Harbor Cottages",
                            TestAddress2 = "Sayre Crescent"
                        },
                        new
                        {
                            TestRequestId = 7,
                            PatientId = 4,
                            RequestDate = new DateTime(2021, 11, 11, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            SuburbId = 57,
                            TestAddress1 = "27 Aspen Complex",
                            TestAddress2 = "La Roche Drive"
                        },
                        new
                        {
                            TestRequestId = 8,
                            PatientId = 5,
                            RequestDate = new DateTime(2021, 11, 11, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            SuburbId = 126,
                            TestAddress1 = "6 Rubin Crescent"
                        },
                        new
                        {
                            TestRequestId = 9,
                            PatientId = 6,
                            RequestDate = new DateTime(2021, 11, 11, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            SuburbId = 127,
                            TestAddress1 = "28 7th Avenue"
                        },
                        new
                        {
                            TestRequestId = 10,
                            PatientId = 7,
                            RequestDate = new DateTime(2021, 11, 11, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            SuburbId = 56,
                            TestAddress1 = "37 The Beaches",
                            TestAddress2 = "Beach Road"
                        },
                        new
                        {
                            TestRequestId = 11,
                            PatientId = 8,
                            RequestDate = new DateTime(2021, 11, 11, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            SuburbId = 57,
                            TestAddress1 = "12 Marshall Road"
                        },
                        new
                        {
                            TestRequestId = 12,
                            PatientId = 9,
                            RequestDate = new DateTime(2021, 11, 11, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            SuburbId = 84,
                            TestAddress1 = "13 Congo Avenue"
                        },
                        new
                        {
                            TestRequestId = 13,
                            PatientId = 10,
                            RequestDate = new DateTime(2021, 11, 11, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            SuburbId = 84,
                            TestAddress1 = "29 Peace Street"
                        },
                        new
                        {
                            TestRequestId = 14,
                            PatientId = 11,
                            RequestDate = new DateTime(2021, 11, 11, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 0,
                            SuburbId = 84,
                            TestAddress1 = "7 Jacks Road"
                        },
                        new
                        {
                            TestRequestId = 15,
                            CalenderEventID = 15,
                            DateAssigned = new DateTime(2021, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2021, 11, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 12,
                            RequestDate = new DateTime(2021, 11, 11, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 3,
                            StartTime = new DateTime(2021, 11, 12, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 84,
                            TestAddress1 = "45 Columbia Crescent"
                        },
                        new
                        {
                            TestRequestId = 16,
                            DateAssigned = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2021, 2, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 1,
                            RequestDate = new DateTime(2021, 1, 31, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            StartTime = new DateTime(2021, 2, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 126,
                            TestAddress1 = "19 Admirality Way"
                        },
                        new
                        {
                            TestRequestId = 17,
                            DateAssigned = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DependentId = 91,
                            EndTime = new DateTime(2021, 2, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 1,
                            RequestDate = new DateTime(2021, 1, 31, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            StartTime = new DateTime(2021, 2, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 126,
                            TestAddress1 = "19 Admirality Way"
                        },
                        new
                        {
                            TestRequestId = 18,
                            DateAssigned = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DependentId = 92,
                            EndTime = new DateTime(2021, 2, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 1,
                            RequestDate = new DateTime(2021, 1, 31, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            StartTime = new DateTime(2021, 2, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 126,
                            TestAddress1 = "19 Admirality Way"
                        },
                        new
                        {
                            TestRequestId = 19,
                            DateAssigned = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DependentId = 93,
                            EndTime = new DateTime(2021, 2, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 1,
                            RequestDate = new DateTime(2021, 1, 31, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            StartTime = new DateTime(2021, 2, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 126,
                            TestAddress1 = "19 Admirality Way"
                        },
                        new
                        {
                            TestRequestId = 20,
                            DateAssigned = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DependentId = 94,
                            EndTime = new DateTime(2021, 2, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 1,
                            RequestDate = new DateTime(2021, 1, 31, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            StartTime = new DateTime(2021, 2, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 126,
                            TestAddress1 = "19 Admirality Way"
                        },
                        new
                        {
                            TestRequestId = 21,
                            DateAssigned = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2021, 2, 13, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 3,
                            PatientId = 3,
                            RequestDate = new DateTime(2021, 2, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            StartTime = new DateTime(2021, 2, 13, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 56,
                            TestAddress1 = "1 Harbor Cottages",
                            TestAddress2 = "Sayre Crescent"
                        },
                        new
                        {
                            TestRequestId = 22,
                            DateAssigned = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2021, 2, 13, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 4,
                            RequestDate = new DateTime(2021, 2, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            StartTime = new DateTime(2021, 2, 13, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 57,
                            TestAddress1 = "27 Aspen Complex",
                            TestAddress2 = "La Roche Drive"
                        },
                        new
                        {
                            TestRequestId = 23,
                            DateAssigned = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2021, 2, 13, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 5,
                            RequestDate = new DateTime(2021, 2, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            StartTime = new DateTime(2021, 2, 13, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 126,
                            TestAddress1 = "6 Rubin Crescent"
                        },
                        new
                        {
                            TestRequestId = 24,
                            DateAssigned = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2021, 2, 13, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 6,
                            RequestDate = new DateTime(2021, 2, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            StartTime = new DateTime(2021, 2, 13, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 127,
                            TestAddress1 = "28 7th Avenue"
                        },
                        new
                        {
                            TestRequestId = 25,
                            DateAssigned = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2021, 2, 13, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 3,
                            PatientId = 7,
                            RequestDate = new DateTime(2021, 2, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            StartTime = new DateTime(2021, 2, 13, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 56,
                            TestAddress1 = "37 The Beaches",
                            TestAddress2 = "Beach Road"
                        },
                        new
                        {
                            TestRequestId = 26,
                            DateAssigned = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2021, 2, 13, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 3,
                            PatientId = 8,
                            RequestDate = new DateTime(2021, 2, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            StartTime = new DateTime(2021, 2, 13, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 57,
                            TestAddress1 = "12 Marshall Road"
                        },
                        new
                        {
                            TestRequestId = 27,
                            DateAssigned = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2021, 2, 13, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 3,
                            PatientId = 9,
                            RequestDate = new DateTime(2021, 2, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            StartTime = new DateTime(2021, 2, 13, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 84,
                            TestAddress1 = "13 Congo Avenue"
                        },
                        new
                        {
                            TestRequestId = 28,
                            DateAssigned = new DateTime(2021, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2021, 2, 13, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 3,
                            PatientId = 10,
                            RequestDate = new DateTime(2021, 2, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            StartTime = new DateTime(2021, 2, 13, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 84,
                            TestAddress1 = "29 Peace Street"
                        },
                        new
                        {
                            TestRequestId = 29,
                            DateAssigned = new DateTime(2021, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2021, 2, 28, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 11,
                            RequestDate = new DateTime(2021, 2, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            StartTime = new DateTime(2021, 2, 28, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 84,
                            TestAddress1 = "7 Jacks Road"
                        },
                        new
                        {
                            TestRequestId = 30,
                            DateAssigned = new DateTime(2021, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2021, 2, 28, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            NurseId = 1,
                            PatientId = 12,
                            RequestDate = new DateTime(2021, 2, 27, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            StartTime = new DateTime(2021, 2, 28, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            SuburbId = 84,
                            TestAddress1 = "45 Columbia Crescent"
                        });
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.SQLViews.GetAllTestRequests", b =>
                {
                    b.Property<int>("TestRequestId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<int>("RequesterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SuburbName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestSubjectID")
                        .HasColumnType("int");

                    b.HasKey("TestRequestId");

                    b.ToView("GetAllTestRequests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.CalendarEvent", b =>
                {
                    b.HasOne("EFCORE_DATAACCESS.Models.TestRequest", "TestRequest")
                        .WithOne("CalenderEvent")
                        .HasForeignKey("EFCORE_DATAACCESS.Models.CalendarEvent", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestRequest");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.Dependent", b =>
                {
                    b.HasOne("EFCORE_DATAACCESS.Models.DependentType", "DependentType")
                        .WithMany("Dependents")
                        .HasForeignKey("DependentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCORE_DATAACCESS.Models.Patient", "MainMember")
                        .WithMany("Dependents")
                        .HasForeignKey("MainMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EFCORE_DATAACCESS.Models.MedicalAidPlan", "MedicalAidPlan")
                        .WithMany("Dependents")
                        .HasForeignKey("MedicalAidPlanId");

                    b.HasOne("EFCORE_DATAACCESS.Models.Suburb", "Suburb")
                        .WithMany("Dependents")
                        .HasForeignKey("SuburbId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DependentType");

                    b.Navigation("MainMember");

                    b.Navigation("MedicalAidPlan");

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.MedicalAidPlan", b =>
                {
                    b.HasOne("EFCORE_DATAACCESS.Models.MedicalAidScheme", "MedicalAidScheme")
                        .WithMany("MedicalAidPlans")
                        .HasForeignKey("MedicalAidSchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalAidScheme");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.NurseSchedule", b =>
                {
                    b.HasOne("EFCORE_DATAACCESS.Models.Nurse", "Nurse")
                        .WithMany("NurseSchedules")
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EFCORE_DATAACCESS.Models.TestRequest", "TestRequest")
                        .WithMany("NurseSchedules")
                        .HasForeignKey("TestRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Nurse");

                    b.Navigation("TestRequest");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.Patient", b =>
                {
                    b.HasOne("EFCORE_DATAACCESS.Models.MedicalAidPlan", "MedicalAidPlan")
                        .WithMany("Patients")
                        .HasForeignKey("MedicalAidPlanId");

                    b.HasOne("EFCORE_DATAACCESS.Models.Suburb", "Suburb")
                        .WithMany("Patients")
                        .HasForeignKey("SuburbId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MedicalAidPlan");

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.Suburb", b =>
                {
                    b.HasOne("EFCORE_DATAACCESS.Models.City", "City")
                        .WithMany("Suburbs")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.SuburbsPreffered", b =>
                {
                    b.HasOne("EFCORE_DATAACCESS.Models.Nurse", "Nurse")
                        .WithMany("SuburbsPreffereds")
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCORE_DATAACCESS.Models.Suburb", "Suburb")
                        .WithMany("SuburbsPreffereds")
                        .HasForeignKey("SuburbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nurse");

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.Test", b =>
                {
                    b.HasOne("EFCORE_DATAACCESS.Models.LabUser", "LabUser")
                        .WithMany("Tests")
                        .HasForeignKey("LabUserId");

                    b.HasOne("EFCORE_DATAACCESS.Models.TestRequest", "TestRequest")
                        .WithOne("Test")
                        .HasForeignKey("EFCORE_DATAACCESS.Models.Test", "TestRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabUser");

                    b.Navigation("TestRequest");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.TestRequest", b =>
                {
                    b.HasOne("EFCORE_DATAACCESS.Models.Dependent", "Dependent")
                        .WithMany("TestRequests")
                        .HasForeignKey("DependentId");

                    b.HasOne("EFCORE_DATAACCESS.Models.Nurse", "Nurse")
                        .WithMany("TestRequests")
                        .HasForeignKey("NurseId");

                    b.HasOne("EFCORE_DATAACCESS.Models.Patient", "Patient")
                        .WithMany("TestRequests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EFCORE_DATAACCESS.Models.Suburb", "Suburb")
                        .WithMany("TestRequests")
                        .HasForeignKey("SuburbId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Dependent");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.City", b =>
                {
                    b.Navigation("Suburbs");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.Dependent", b =>
                {
                    b.Navigation("TestRequests");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.DependentType", b =>
                {
                    b.Navigation("Dependents");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.LabUser", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.MedicalAidPlan", b =>
                {
                    b.Navigation("Dependents");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.MedicalAidScheme", b =>
                {
                    b.Navigation("MedicalAidPlans");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.Nurse", b =>
                {
                    b.Navigation("NurseSchedules");

                    b.Navigation("SuburbsPreffereds");

                    b.Navigation("TestRequests");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.Patient", b =>
                {
                    b.Navigation("Dependents");

                    b.Navigation("TestRequests");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.Suburb", b =>
                {
                    b.Navigation("Dependents");

                    b.Navigation("Patients");

                    b.Navigation("SuburbsPreffereds");

                    b.Navigation("TestRequests");
                });

            modelBuilder.Entity("EFCORE_DATAACCESS.Models.TestRequest", b =>
                {
                    b.Navigation("CalenderEvent");

                    b.Navigation("NurseSchedules");

                    b.Navigation("Test")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
